# Реализовать программу работы с органическими клетками, состоящими из ячеек.
# Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное
# (с округлением до целого) деление клеток, соответственно.
# Сложение.
#   Объединение двух клеток.
#   При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток
# Вычитание.
#   Участвуют две клетки.
#   Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля,
#   иначе выводить соответствующее сообщение.
# Умножение.
#   Создаётся общая клетка из двух.
#   Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление.
#   Создаётся общая клетка из двух.
#   Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
#
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
#   Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернёт строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернёт строку: *****\n*****\n*****.

class Cell:

    def __init__(self, amount):
        self.amount = int(amount)

    def __str__(self):
        return str(self.amount)

    def __add__(self, other):
        return Cell(self.amount + other.amount)

    def __sub__(self, other):
        res = self.amount - other.amount
        if res > 0:
            return Cell(res)
        else:
            raise ValueError

    def __mul__(self, other):
        return Cell(self.amount * other.amount)

    def __truediv__(self, other):
        return Cell(self.amount // other.amount)

    def make_order(self, lenght):
        res = ''
        for i in range(1, self.amount + 1):
            res += '*'
            if i > 0 and i % lenght == 0:
                res += '\\n'
        return res


C1 = Cell(10)
C2 = Cell(30)
print(C1 + C2)
print(C1 * C2)
print(C2 / C1)
print(C2 - C1)
try:
    print(C1 - C2)
except ValueError:
    print('sum of cell is less than zero')

print(C1.make_order(3))
print(C2.make_order(7))
